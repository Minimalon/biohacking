from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.database.model import ClientRolesEnum, Catalog, Clients, TmcCatalog, Orders, OrderWorks
from core.database.query import Database
from core.services.admin.callback_data import ShopCreateUser, SelectRole, cbCatalog
from core.artix.foreman.pd_model import ForemanCash
from core.services.start.callback_data import cbProduct
from .. import callback_data as cb_data

def kb_admin_panel(client: Clients) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='set_admin')
    keyboard.button(text='–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Å—Å–µ', callback_data='create_user')
    keyboard.button(text='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data='analytics')
    keyboard.button(text='–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', callback_data='create_post')
    keyboard.button(text='–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º', callback_data='operation_catalogs')
    if client.role.rolename in [ClientRolesEnum.SUPERADMIN, ]:
        keyboard.button(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º‚öôÔ∏è', callback_data='bot_settings')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_catalogs_panel() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏üìÇ', callback_data='operations_with_catalogs')
    keyboard.button(text='–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–≤–∞—Ä–æ–ºüõí', callback_data='operations_with_products')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_select_role(client: Clients) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    if client.role.rolename == ClientRolesEnum.ADMIN:
        keyboard.button(text=ClientRolesEnum.ADMIN.value, callback_data=SelectRole(role=ClientRolesEnum.ADMIN))
        keyboard.button(text=ClientRolesEnum.CLIENT.value, callback_data=SelectRole(role=ClientRolesEnum.CLIENT))
        keyboard.button(text=ClientRolesEnum.EMPLOYEE.value, callback_data=SelectRole(role=ClientRolesEnum.EMPLOYEE))
        keyboard.button(text=ClientRolesEnum.BLOGER.value, callback_data=SelectRole(role=ClientRolesEnum.BLOGER))
    elif client.role.rolename == ClientRolesEnum.SUPERADMIN:
        for role in ClientRolesEnum:
            keyboard.button(text=role.value, callback_data=SelectRole(role=role))
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_select_shop(cashes: list[ForemanCash]) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    for cash in cashes:
        keyboard.button(text=f'{cash.shopcode}',
                        callback_data=ShopCreateUser(shopcode=cash.shopcode))
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_send_post() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É‚úÖ', callback_data='send_post')
    keyboard.button(text='–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—åüîÑ', callback_data='create_post')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_operations_with_catalogs() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥‚ûï', callback_data='create_catalog')
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥üîÑ', callback_data='change_catalog')
    keyboard.button(text='–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥‚ùå', callback_data='delete_catalog')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_after_create_catalog() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ‚ûï', callback_data='create_catalog')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_operations_with_products() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä‚ûï', callback_data='add_product_to_catalog')
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—ÄüîÑ', callback_data='change_product_to_catalog')
    keyboard.button(text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä‚ùå', callback_data='delete_product_to_catalog')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_after_add_product() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä‚ûï', callback_data='add_product_to_catalog')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_select_catalog(catalogs: list[Catalog]) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    for catalog in catalogs:
        keyboard.button(text=f'{catalog.title}',
                        callback_data=cbCatalog(id=catalog.id))
    keyboard.button(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='orders')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_prepare_add_product() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞üîÑ', callback_data='—Åhange_text_product')
    keyboard.button(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ', callback_data='confirm_add_product_to_catalog')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_change_product() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data='—Åhange_price_product')
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥', callback_data='—Åhange_code_product')
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', callback_data='—Åhange_text_product')
    keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', callback_data='—Åhange_title_product')
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_select_product(products: list[TmcCatalog]) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    for product in products:
        keyboard.button(text=product.title, callback_data=cbProduct(id=product.id))
    keyboard.adjust(1)
    return keyboard.as_markup()


def kb_orders_list() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ãüìÇ', callback_data='current_work_orders')
    keyboard.button(text='–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤üìú', callback_data='history_work_orders')
    keyboard.adjust(1)
    return keyboard.as_markup()

async def kb_open_orders(orders: list[OrderWorks]) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    for order in orders:
        db = Database()
        client = await db.get_client(order.user_id)
        ticket_date = order.date.strftime('%d.%m.%Y %H:%M')
        keyboard.button(text=f'{ticket_date} {client.first_name}', callback_data=cb_data.CbOpenOrders(order_id=order.order_id))
    keyboard.adjust(1)
    return keyboard.as_markup()

def kb_close_order(order_id: int, status_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑‚ùå', callback_data=cb_data.CbCloseOrder(order_id=order_id, status_id=status_id))
    keyboard.adjust(1)
    return keyboard.as_markup()


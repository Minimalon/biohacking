from core.database.catalog_query import CatalogQuery
from core.database.enums.checklists import EnumCheckListContentActions
from core.database.model import ChecklistContent, CheckListComplete, TmcCatalog, Clients, HelpTicket, OrdersItems, \
    Orders
from core.database.query import Database
from core.services.start.pd_models.profile_bonuses import Profile

error_head = f"‚ûñ‚ûñ‚ûñ‚ûñüö®–û–®–ò–ë–ö–êüö®‚ûñ‚ûñ‚ûñ‚ûñ\n"
intersum_head = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ùóÔ∏è–í–ê–ñ–ù–û‚ùóÔ∏è‚ûñ‚ûñ‚ûñ‚ûñ\n"
information_head = f"‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n"
auth_head = f"‚ûñ‚ûñ‚ûñüîë–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—èüîë‚ûñ‚ûñ‚ûñ\n"
success_head = '‚ûñ‚ûñ‚ûñ‚úÖ–£—Å–ø–µ—à–Ω–æ‚úÖ‚ûñ‚ûñ‚ûñ\n'

fake_phone = f'{error_head}–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—É–∂–æ–π —Å–æ—Ç–æ–≤–æ–π.'
is_develope = '–î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
error_cashNotOnline = error_head + f'–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤ —Å–µ—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –≤—ã–∫–ª—é—á–µ–Ω, –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.'
no_access = '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'


async def create_user(fio: str, user_code: int, cash_code: int) -> str:
    return (f'{success_head}'
            f'<b>–§–ò–û</b>: <code>{fio}</code>\n'
            f'<b>–ü–∞—Ä–æ–ª—å</b>: <code>{user_code}</code>\n'
            f'<b>–ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞</b>: <code>{cash_code}</code>\n'
            )


async def profile(profile: Profile) -> str:
    return (f'{information_head}'
            f'<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b>: <code>{profile.cs_card.idcard}</code>\n'
            f'<b>–ë–∞–ª–∞–Ω—Å</b>: <code>{profile.cs_card_balance.balance / 100} —Ä—É–±</code>\n'
            )


async def history_complete_question(content: ChecklistContent) -> str:
    return (
        f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: #Ô∏è‚É£<code>{content.page}</code>\n'
        f'‚ûñ‚ûñ‚ûñ‚ùì<b><u>–í–û–ü–†–û–°</u></b>‚ùì‚ûñ‚ûñ‚ûñ\n\n'
        f'{content.content}\n'
    )


async def user_info(client: Clients) -> str:
    full_name = f'{client.first_name} {client.last_name}' if client.last_name else client.first_name
    return (f'{information_head}'
            f'–ò–º—è: <code>{full_name}</code>\n'
            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{client.phone_number}\n'
            )


async def history_complete_answer(cl: CheckListComplete, content: ChecklistContent) -> str:
    if cl.action == EnumCheckListContentActions.NONE:
        return (
            f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: #Ô∏è‚É£<code>{content.page}</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ùóÔ∏è<b><u>–û–¢–í–ï–¢</u></b>‚ùóÔ∏è‚ûñ‚ûñ‚ûñ\n'
            f'‚úÖ\n'
        )
    else:
        return (
            f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: #Ô∏è‚É£<code>{content.page}</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ùóÔ∏è<b><u>–û–¢–í–ï–¢</u></b>‚ùóÔ∏è‚ûñ‚ûñ‚ûñ\n\n'
            f'{cl.text}\n'
        )


async def account(first_name: str) -> str:
    return (
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n'
        f'–Ø –º–æ–≥—É —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤, –ø–æ–∫–∞–∂—É —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —Ä–µ—à—É –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º.\n\n'
        f'–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–¥–µ—Ç—Å—è, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n\n'
        f'–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?'
    )


async def product_info(product: TmcCatalog) -> str:
    text = (
        f'{information_head}'
        f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{product.title}</code>\n'
        f'<b>–®—Ç—Ä–∏—Ö–∫–æ–¥:</b> <code>{product.code}</code>\n'
        f'<b>–¶–µ–Ω–∞:</b> <code>{product.price}</code>\n'
        f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'{product.text}'
    )
    return text


async def help_ticket_help(ticket: HelpTicket, client: Clients) -> str:
    full_name = f'{client.first_name} {client.last_name}' if client.last_name else client.first_name
    return (
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–ö–ª–∏–µ–Ω—Ç‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
        f'<b>–ò–º—è:</b> <code>{full_name}</code>\n'
        f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> +{client.phone_number}\n'
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–ó–∞—è–∫–∞‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
        f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{ticket.id}</code>\n'
        f'<b>–°—Ç–∞—Ç—É—Å:</b> <code>{ticket.ticket_status.name}</code>\n'
        f'<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <code>{ticket.date.strftime("%d.%m.%Y %H:%M:%S")}</code>\n'
    )


async def order_work(order: Orders, client: Clients, order_items: list[OrdersItems]) -> str:
    full_name = f'{client.first_name} {client.last_name}' if client.last_name else client.first_name
    text = (
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–ö–ª–∏–µ–Ω—Ç‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
        f'<b>–ò–º—è:</b> <code>{full_name}</code>\n'
        f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> +{client.phone_number}\n'
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–ó–∞–∫–∞–∑‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
        f'<b>–ù–æ–º–µ—Ä –ó–∞–∫–∞–∑:</b> <code>{order.id}</code>\n'
        f'<b>–°—Ç–∞—Ç—É—Å:</b> <code>{order.status.name}</code>\n'
        f'<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <code>{order.date.strftime("%d.%m.%Y %H:%M:%S")}</code>\n'
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–°–æ—Å—Ç–∞–≤‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
    )
    db = CatalogQuery()
    for item in order_items:
        product = await db.get_tmccatalog(item.productid)
        catalog = await db.get_catalog(product.catalogid)
        text += (
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{product.title}</code>\n'
            f'<b>–¶–µ–Ω–∞:</b> <code>{product.price}</code>\n'
            f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{item.quantity}</code>\n'
            f'<b>–ö–∞—Ç–∞–ª–æ–≥:</b> <code>{catalog.title}</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        )
    return text
async def current_user_order(order: Orders, order_items: list[OrdersItems]) -> str:
    text = (
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–ó–∞–∫–∞–∑‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
        f'<b>–ù–æ–º–µ—Ä –ó–∞–∫–∞–∑:</b> <code>{order.id}</code>\n'
        f'<b>–°—Ç–∞—Ç—É—Å:</b> <code>{order.status.name}</code>\n'
        f'<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <code>{order.date.strftime("%d.%m.%Y %H:%M:%S")}</code>\n'
        f'‚ûñ‚ûñ‚ûñ‚ÑπÔ∏è–°–æ—Å—Ç–∞–≤‚ÑπÔ∏è‚ûñ‚ûñ‚ûñ\n'
    )
    db = CatalogQuery()
    for item in order_items:
        product = await db.get_tmccatalog(item.productid)
        catalog = await db.get_catalog(product.catalogid)
        text += (
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{product.title}</code>\n'
            f'<b>–¶–µ–Ω–∞:</b> <code>{product.price}</code>\n'
            f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{item.quantity}</code>\n'
            f'<b>–ö–∞—Ç–∞–ª–æ–≥:</b> <code>{catalog.title}</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        )
    return text


if __name__ == '__main__':
    print(801 // 800 + 1)
